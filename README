--------------------------------------------------
TIMESTAMPSOURCE LIBRARY FOR EPICS AREA DETECTOR
--------------------------------------------------

How to use the user-defined timestamp source for the camera driver

This module provides a library for the user-defined timestamp 
source which is named "timeStampSource."

The library provides:
1. Registration the user callback, 
2. Default callback function, 
3. Database template for the default callback function.

Purpose for the timeStampSource library

- Provide callback function for the areaDetector
- The callback provides PulseID embedded timestamp for the driver, asyn device and file plug-in(s)
- the callback also provides diagnostic features
- run-time configurable event code
- EPICS PVs for the event code configuration and diagnostics


Instructions to use the library

- Please, put the followings lines into "RELEASE/configure" file

ADSUPPORT_MODULE_VERSION=<version>
ADSUPPORT=$(EPICS_MODULES)/ADSupport/$(ADSUPPORT_MODULE_VERSION)

- Please, add the followings lines into "<application>/src/Makefile"

<application>_DBD += timeStampSource.dbd
<application>_LIBS += timeStampSource

- Please, add the following into "<application>/Db/Makefile"

DB_INSTALLS += $(ADSUPPORT)/db/timeStampSource.db

- Please, load up the database templeate

dbLoadRecord("db/timeStampSource.db", "DEV=<DEV_MACRO>,PORT=<PORT_NAME>,SNAM=<BUFF_SIZE>")

DEV: Please, follow the PV Name  Convention
PORT: port name for camera
SNAM: size of history buffer for the diagnostic history. The default 256 will be applied, if it is not described in the command.

- Please, register the user-defined timestamp callback with the following

registerUserTimeStampSource("<PORT_NAME>", "TimeStampSource")

"<PORT_NAME>": port name for the camera
"TimeStampSource": the callback function name. If IOC engineer wants to replace it with own function, Please, replace the string with the own function name.

The command should be for each camera port. If there are multiple camera  and camera ports, Please, repeat the command with correct port name.


- Verify 

If the registration and database loading are completed successfully, we can verify it with the following command.

listUserTimeStampSource [PORT_NAME]

Here is an example.

epics> listUserTimeStampSource
listUserTimeStampSource, found 1 registration(s)
 port name:            PS695     function name:  TimeStampSource, (0x9e1f50)
 time-stamp source has 7 PV(s)
    IOC:DMP1:PS695:TSS_APULSEID
    IOC:DMP1:PS695:TSS_CPULSEID
    IOC:DMP1:PS695:TSS_CTIMESLOT
    IOC:DMP1:PS695:TSS_DPULSEID
    IOC:DMP1:PS695:TSS_ERTICKS
    IOC:DMP1:PS695:TSS_EVENTCODE
    IOC:DMP1:PS695:TSS_SETEC
epics>


- Supporting PVs and Purpose

--------------------	------------------------	---------------------------------------------------------------------------------------------------
PV			History Buffer PV		Purpose/Description
--------------------	------------------------	---------------------------------------------------------------------------------------------------
$(DEV):TSS_SETEC	N/A				Set Event Code for the timestamp
$(DEV):TSS_EVENTCODE	$(DEV):TSS_EVENTCODE_HST	Readout event code which has been configured by $(DEV):TSS_SETEC
$(DEV):TSS_APULSEID	$(DEV):TSS_APLUSEID_HST		PulseID for the active timeslot (or for the event code)
$(DEV):TSS_CPULSEID	$(DEV):TSS_CPULSEID_HST		PulseID for the current timeslot at callback time
$(DEV):TSS_DPULSEID	$(DEV):TSS_DPULSEID_HST		PulseID difference between the active timeslot and the current
$(DEV):TSS_CTIMESLOT	$(DEV):TSS_CTIMESLOT_HST	Current timeslot number at callback time
$(DEV):TSS_ERTICKS	$(DEV):TSS_ERTICKS_HST		EVR clock tick counter (119MHz clock) / Elapsed time from the current fiducial to the callback time


-----------------------------------------------------
TIMESTAMPSOURCE - FIFO PulseId
-----------------------------------------------------

The ADSupport TSS library provides FIFO pulseID support that allows images to be properly
tagged even if the transmission and the image processing time takes longer than the time
between pulse IDs (8.333 ms).

When the image acquisition is enabled (PV :Acquisition, defined in the
axisTicksApp/Db/profile.template file) the TSS library starts saving the PulseIDs generated
by event 140.

At the end of the image acquisition (at callback time), the PulseID previously saved
is used to tag the image. The PulseIDs are saved in a ring buffer and tagged to the images
in the order of their arrival.

The callback 'PipelinedTimeStampSource' should be used to enable the FIFO image tagging.

For every PulseID stored in the ring buffer a perfMeasure sampling point is started. Each
sampling point will measure the time elapsed between the time the event is received and the
time the image is time stamped. This is a snapshot of the perfMeasure samples:

epics> dbior drvPerfMeasure 3
Driver: drvPerfMeasure
Estimated Clock Speed: 2601.265163 MHz
Driver has 7 measurement point(s) now...
--------------------------------------------------------------------------------------------
    Node name     Enb         Counter   Time(usec)    Minimum      Maximum          Description
--------------------------------------------------------------------------------------------
ImageAcquisition-0   1          164 6368.70790246 5612.61658660 6382.42661154 Time between trigger and image tagging
ImageAcquisition-1   1          165 6373.01349966 6259.99272647 39578.87356676 Time between trigger and image tagging
ImageAcquisition-2   1          164 6369.64129443 6215.04690485 6401.03217344 Time between trigger and image tagging
ImageAcquisition-3   1          165 6371.43273040 6212.51044679 139567.31830495 Time between trigger and image tagging
ImageAcquisition-4   1          164 6367.47388755 6238.98256542 6381.84112721 Time between trigger and image tagging
--------------------------------------------------------------------------------------------
Number of Stress test threads: 0

If the elapsed time is longer than 2 PulseIDs (i.e. 16.666ms) than it is assumed one image
has been lost, which results in a PulseID being removed from the ring buffer, and not used
for image tagging. If the delay is longer more PulseIDs are removed.

These are some helper PVs to monitor the acquisition time stamping:

$(DEV):TSS_BUFFER_COUNT - counts the number of pending PulseIDs in the buffer
$(DEV):TSS_ELAPSED - last elapsed time between trigger and image tagging
$(DEV):TSS_ELAPSED_MIN - minimum TSS_ELAPSED recorded time 
$(DEV):TSS_ELAPSED_MAX - maximum TSS_ELAPSED recorded time
$(DEV):TSS_EXPECTED_TRANSMISSION_TIME - calculeted wire transmission time based on the image ROI size
$(DEV):TSS_IMAGE_LOST_COUNT - number of images presumed lost because of long acquisition delays
$(DEV):TSS_PULSEID_LOST - PULSEID of the last lost image
$(DEV):TSS_IMAGE_ACQUISITION_RESET - reset TSS_ELAPSED times

----------------------------------------------------------
PULSEID waveform record
----------------------------------------------------------

The PULSEID waveform has been implement a part of timestamp source in ADSUPPORT.
Thus, ioc engineer needs to follow up the instruction for timestamp source library above.
the PULSEID waveform need its own database file. ioc engineer needs to add the following 
line into the Makefile file in Db directory

	DB_INSTALLS += $(ADSUPPORT)/db/aSubPulseId.db


The PULSEID wavefrom requires the attribute plugin. The attribute plugin provicdes timestamp information to the PULSEID waveform.
Thus, ioc engineer needs to setup both attribute plugin and PULSEID wavefrom in "st.cmd" file.
Please, look at the follwoing example. We assumed, the PULSEID waveform archive pulse ids from a fileplugin which saves image files.
The followings should be allocated before the iocInit().

	# Create an NDAttribute plugin with 8 attributes
	NDAttrConfigure("ATTR$(ID)", $(QSIZE), 0, "$(FILE_PORT)", 0, 1, 0, 0, 0)
	dbLoadRecords("db/NDPluginBase.template", "P=$(PREFIX):,R=Attr$(ID):,    PORT=ATTR$(ID),ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(FILE_PORT),NDARRAY_ADDR=0")
	dbLoadRecords("db/NDAttribute.template",  "P=$(PREFIX):,R=Attr$(ID):,    PORT=ATTR$(ID),ADDR=0,TIMEOUT=1,NCHANS=$(NCHANS)")
	dbLoadRecords("db/NDAttributeN.template", "P=$(PREFIX):,R=Attr$(ID)_TSNS:,  PORT=ATTR$(ID),ADDR=0,TIMEOUT=1,NCHANS=$(NCHANS)")

	# Prepare PulseID waveform
	dbLoadRecords("db/aSubPulseId.db", "P=$(PREFIX):,R=Attr$(ID)_TSNS:,NCHANS=$(NCHANS)")


After the iocInit(), we need to do the followings to set up the attribute plugin.

	dbpf("$(PREFIX):Attr$(ID)_TSNS:AttrName", "NDArrayEpicsTSnSec")
	dbpf("$(PREFIX):Attr$(ID)_TSNS:TSArrayValue.FLNK", "$(PREFIX):Attr$(ID)_TSNS:PulseIdArrayValue PP")
	dbpf("$(PREFIX):Attr$(ID):EnableCallbacks", "Enable")
	dbpf("$(PREFIX):Attr$(ID):TSControl", "Erase/Start")


Operation:

Before saving file by the file plugin, need to caput ZERO (or "Erase/Start") to "$(PREFIX):Attr$(ID):TSControl". It will reset the previous pulse id archiving
in the waveform and make it ready for next archiving

	caput "$(PREFIX):Attr$(ID):TSControl" 0


After finishing file saving, you can read out pulse ids from the following PV.

	"$(PREFIX):Attr$(ID)_TSNS:PulseIdArrayValue"




----------------
Gaussian Fitting
----------------

Introducing a new plugin namely NDPluginStats2 which has Gaussian fitting algorithm.
The Gaussian shows more stable and less jitter compare to the existing centroid calculation.

1. Set up requirement
- need put the following lines into Makefile for ioc applicaton source directory

<application_name>_DBD  += NDPluginStats2.dbd
<applicaiton_name>_LIBS += NDPluginStats2

- need to put the following line into Makefile for Db directory to install new template

DB_INSTALLS += $(ADSUPPORT)/db/NDStats2.template
DB_INSTALLS += $(ADSUPPORT)/db/profile2.template

- need to replace the following lines into iocBoot/common/areaDetector.cfg

NDStats2Configure("STATS$(ID)", $(QSIZE), $(BLOCKING), "ROI$(ID)", 0, 0, 0)
dbLoadRecords("db/NDStats2.template",     "P=$(PREFIX):$(ID),R=:Stats:,  PORT=STATS$(ID),ADDR=0,TIMEOUT=1,HIST_SIZE=256,XSIZE=$(XSIZE),YSIZE=$(YSIZE),NCHANS=$(NCHANS)")


- need to load up "profile2.template" instead of "profile.template"
  put the following line into st.cmd

dbLoadRecords("db/profile2.template","P=$(PREFIX):, ID=$(ID), XSIZE=$(XSIZE), X_OFF=$(X_OFF), YSIZE=$(YSIZE), Y_OFF=$(Y_OFF), RESOLUTION=$(RESOLUTION), PREC=1, EGU=$(EGU)")


2. Update EDM screens

- need to replace the cameras edm screen with the following file

$(ADSUPPORT)/gfitApp/edm/cameras.edl

- need to replace  the settings edm screen with the following file

$(ADSUPPORT)/gfitApp/edm/prosilicaSettings.edl


3. New PVs for the Gaussian Fitting

Center position (x) for Gaussian        <PREFIX>:Stats:XGpos_RBV
Center position (y) for Gaussian        <PREFIX>:Stats:YGpos_RBV
Width (x) of Gaussian                   <PREFIX>:Stats:GWidthX_mm_RBV
Width (y) of Gaussian                   <PREFIX>:Stats:GWidthY_mm_RBV

4. New PV for Intensity Threshold High
- Introduce new PV to cut out higher intensity pixels from the centroid/guassian calculation.
- To disable the High threshold, just put a large number (ex, 65536 for 16 bits camera, or 256 for 8 bits camera).

Set Threshold High                      <PREFIX>:Stats:CentroidThresholdHi
Read out Threshold High                 <PREFIX>:Stats:CentroidThresholdHi_RBV



