--------------------------------------------------
TIMESTAMPSOURCE LIBRARY FOR EPICS AREA DETECTOR
--------------------------------------------------

How to use the user-defined timestamp source for the camera driver

This module provides a library for the user-defined timestamp 
source which is named "timeStampSource."

The library provides:
1. Registration the user callback, 
2. Default callback function, 
3. Database template for the default callback function.

Purpose for the timeStampSource library

- Provide callback function for the areaDetector
- The callback provides PulseID embedded timestamp for the driver, asyn device and file plug-in(s)
- the callback also provides diagnostic features
- run-time configurable event code
- EPICS PVs for the event code configuration and diagnostics


Instructions to use the library

- Please, put the followings lines into "RELEASE/configure" file

ADSUPPORT_MODULE_VERSION=<version>
ADSUPPORT=$(EPICS_MODULES)/ADSupport/$(ADSUPPORT_MODULE_VERSION)

- Please, add the followings lines into "<application>/src/Makefile"

<application>_DBD += timeStampSource.dbd
<application>_LIBS += timeStampSource

- Please, add the following into "<application>/Db/Makefile"

DB_INSTALLS += $(ADSUPPORT)/db/timeStampSource.db

- Please, load up the database templeate

dbLoadRecord("db/timeStampSource.db", "DEV=<DEV_MACRO>,PORT=<PORT_NAME>,SNAM=<BUFF_SIZE>")

DEV: Please, follow the PV Name  Convention
PORT: port name for camera
SNAM: size of history buffer for the diagnostic history. The default 256 will be applied, if it is not described in the command.

- Please, register the user-defined timestamp callback with the following

registerUserTimeStampSource("<PORT_NAME>", "TimeStampSource")

"<PORT_NAME>": port name for the camera
"TimeStampSource": the callback function name. If IOC engineer wants to replace it with own function, Please, replace the string with the own function name.

The command should be for each camera port. If there are multiple camera  and camera ports, Please, repeat the command with correct port name.


- Verify 

If the registration and database loading are completed successfully, we can verify it with the following command.

listUserTimeStampSource [PORT_NAME]

Here is an example.

epics> listUserTimeStampSource
listUserTimeStampSource, found 1 registration(s)
 port name:            PS695     function name:  TimeStampSource, (0x9e1f50)
 time-stamp source has 7 PV(s)
    IOC:DMP1:PS695:TSS_APULSEID
    IOC:DMP1:PS695:TSS_CPULSEID
    IOC:DMP1:PS695:TSS_CTIMESLOT
    IOC:DMP1:PS695:TSS_DPULSEID
    IOC:DMP1:PS695:TSS_ERTICKS
    IOC:DMP1:PS695:TSS_EVENTCODE
    IOC:DMP1:PS695:TSS_SETEC
epics>


- Supporting PVs and Purpose

--------------------	------------------------	---------------------------------------------------------------------------------------------------
PV			History Buffer PV		Purpose/Description
--------------------	------------------------	---------------------------------------------------------------------------------------------------
$(DEV):TSS_SETEC	N/A				Set Event Code for the timestamp
$(DEV):TSS_EVENTCODE	$(DEV):TSS_EVENTCODE_HST	Readout event code which has been configured by $(DEV):TSS_SETEC
$(DEV):TSS_APULSEID	$(DEV):TSS_APLUSEID_HST		PulseID for the active timeslot (or for the event code)
$(DEV):TSS_CPULSEID	$(DEV):TSS_CPULSEID_HST		PulseID for the current timeslot at callback time
$(DEV):TSS_DPULSEID	$(DEV):TSS_DPULSEID_HST		PulseID difference between the active timeslot and the current
$(DEV):TSS_CTIMESLOT	$(DEV):TSS_CTIMESLOT_HST	Current timeslot number at callback time
$(DEV):TSS_ERTICKS	$(DEV):TSS_ERTICKS_HST		EVR clock tick counter (119MHz clock) / Elapsed time from the current fiducial to the callback time


-----------------------------------------------------
TIMESTAMPSOURCE Addendum - Prosilica GX1050 at 120 Hz
-----------------------------------------------------

The ADSupport TSS library also provides timestamp for cameras whose acquisition+transfer time is
longer than 8.1 ms, but less than 16.2 ms. That is the case of the Prosilica GX1050 running
at 120 Hz, using an ROI of 1024x900.

The transfer time is a little less then the 8.1 ms between Event Codes 140 (120 Hz), and it takes
about 6 ms more for AD (areaDetector) to process the data. If the TSS callback described above
is used then the image will always be tagged with the pulseId of the following image.

By using the 'PipelinedTimeStampSource' the pulseId (timestamp) of the event that triggered
the image acquisition is saved in a 2-position buffer, and later used when the image is tagged.

The $(DEV):TSS_START is triggered on the $(DEV):TSS_SETEC event and it records the current
EVR timestamp. When the image acquisition is finished AD calls the PipelinedTimeStampSource
callback, which takes the timestamp saved by the record a couple of $(DEV):TSS_SETEC events
before - IFF the $(DEV):TSS_SETEC event is 140 (120 Hz). If the $(DEV):TSS_SETEC is not 140
then the timestamping behaves the same way as above.

registerUserTimeStampSource("<PORT_NAME>", "PipelinedTimeStampSource")

The $(DEV):TSS_START record also starts a perfMeasure timer to measure the time between the
trigger and image timestamping. The command 'dbior drvPerfMeasure 2' shows details about
the measurement. The following is the measurement of the Prosilica GX1050 running at 120Hz
with ROI of 1024x900 and offset of 62 in Y (needed for the 120 Hz operation):

epics> dbior drvPerfMeasure 2
Driver: drvPerfMeasure
Estimated Clock Speed: 2701.303929 MHz
Driver has 1 measurement point(s) now...
--------------------------------------------------------------------------------------------
    Node name     Enb         Counter   Time(usec)    Minimum      Maximum          Description
--------------------------------------------------------------------------------------------
ImageAcquisition   1         8879 14061.33148966 9612.45779168 507189.30820465 Time between trigger and image tagging
--------------------------------------------------------------------------------------------
